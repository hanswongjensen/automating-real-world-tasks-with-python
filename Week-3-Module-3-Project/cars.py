#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data

def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    
    # TODO: also handle max sales
    #calculate the car model which had the most sales

    total_sales_num = 0
    current_most_sales = {}
    for car in data:
      if car["total_sales"] > total_sales_num:
        current_most_sales["car"] = car["car"]
        total_sales_num = car["total_sales"]
    most_sold_car = current_most_sales["car"]["car_make"] + " " + current_most_sales["car"]["car_model"]

    # TODO: also handle most popular car_year
    #calculate the most popular car year across all car make models
    #Adding up the car sales per year into a dictionary
    car_year_dict = {}
    for c in data:
      if c["car"]["car_year"] not in car_year_dict:
        car_year_dict[c["car"]["car_year"]] = c["total_sales"]
      else:
        car_year_dict[c["car"]["car_year"]] += c["total_sales"]

    #Going through dictionary to determine year with most car sales
    year = ""
    sold_cars = 0
    for key, value in car_year_dict.items():
      if car_year_dict[key] > sold_cars:
        year = key
        sold_cars = car_year_dict[key]

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The " + str(most_sold_car) + " had the most sales: " + str(total_sales_num),
    "The most popular year was " + str(year) + " with " + str(sold_cars) + " sales."
  ]

  return summary

def neaten_summary(data):
  summary_neat = ''
  summary = process_data(data)
  for line in summary:
    summary_neat = summary_neat + line + "<br/>"
  return summary_neat

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

# Generate PDF

def generate_report(data):
  cars_table = cars_dict_to_table(data)
  summary = neaten_summary(data)
  reports.generate("/tmp/cars.pdf", "Sales Summary", summary, cars_table)

# Send Email

def sending_email(data):
  sender = "automation@example.com"
  recipient = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = neaten_summary(data)
  attachment_path = "/tmp/cars.pdf"

  final_email = emails.generate(sender, recipient, subject, body, attachment_path)
  emails.send(final_email)

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  generate_report(data)
  # TODO: send the PDF report as an email attachment
  sending_email(data)

if __name__ == "__main__":
  main(sys.argv)
